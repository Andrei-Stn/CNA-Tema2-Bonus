// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Protos/spring.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Tema2CNA.Protos {
  public static partial class Spring
  {
    static readonly string __ServiceName = "Spring";

    static readonly grpc::Marshaller<global::Tema2CNA.Protos.SpringRequest> __Marshaller_SpringRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Tema2CNA.Protos.SpringRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Tema2CNA.Protos.SpringResponse> __Marshaller_SpringResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Tema2CNA.Protos.SpringResponse.Parser.ParseFrom);

    static readonly grpc::Method<global::Tema2CNA.Protos.SpringRequest, global::Tema2CNA.Protos.SpringResponse> __Method_GetSpringSign = new grpc::Method<global::Tema2CNA.Protos.SpringRequest, global::Tema2CNA.Protos.SpringResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetSpringSign",
        __Marshaller_SpringRequest,
        __Marshaller_SpringResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Tema2CNA.Protos.SpringReflection.Descriptor.Services[0]; }
    }

    /// <summary>Client for Spring</summary>
    public partial class SpringClient : grpc::ClientBase<SpringClient>
    {
      /// <summary>Creates a new client for Spring</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public SpringClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for Spring that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public SpringClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected SpringClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected SpringClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::Tema2CNA.Protos.SpringResponse GetSpringSign(global::Tema2CNA.Protos.SpringRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetSpringSign(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Tema2CNA.Protos.SpringResponse GetSpringSign(global::Tema2CNA.Protos.SpringRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetSpringSign, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Tema2CNA.Protos.SpringResponse> GetSpringSignAsync(global::Tema2CNA.Protos.SpringRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetSpringSignAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Tema2CNA.Protos.SpringResponse> GetSpringSignAsync(global::Tema2CNA.Protos.SpringRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetSpringSign, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override SpringClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new SpringClient(configuration);
      }
    }

  }
}
#endregion
